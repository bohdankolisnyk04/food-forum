# Generated by Django 5.2.5 on 2025-08-31 10:40

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('unit', models.CharField(choices=[('g', 'grams'), ('ml', 'milliliters'), ('pcs', 'pieces')], max_length=20)),
                ('calories_per_100', models.DecimalField(decimal_places=2, max_digits=6)),
                ('protein_per_100', models.DecimalField(decimal_places=2, max_digits=6)),
                ('fat_per_100', models.DecimalField(decimal_places=2, max_digits=6)),
                ('density_g_per_ml', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('grams_per_piece', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('carbs_per_100', models.DecimalField(decimal_places=2, max_digits=6)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FoodForumUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=30, unique=True, validators=[django.core.validators.MinLengthValidator(2)])),
                ('bio', models.TextField(blank=True)),
                ('avatar', models.ImageField(blank=True, help_text='Profile picture', null=True, upload_to='avatars/')),
                ('reputation', models.PositiveIntegerField(default=0)),
                ('is_active_contributor', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='foodforum_users', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='foodforum_users_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'FoodForum User',
                'verbose_name_plural': 'FoodForum Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('recipe_text', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='recipes/')),
                ('time_minutes', models.PositiveIntegerField(default=0)),
                ('servings', models.PositiveIntegerField(default=1)),
                ('is_published', models.BooleanField(default=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('value', models.SmallIntegerField(choices=[(1, 'Like'), (-1, 'Dislike')])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to=settings.AUTH_USER_MODEL)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='forum.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Quantity in selected unit', max_digits=10)),
                ('unit', models.CharField(choices=[('g', 'grams'), ('ml', 'milliliters'), ('pcs', 'pieces')], default='g', max_length=3)),
                ('note', models.CharField(blank=True, help_text="Optional note (e.g., 'chopped')", max_length=255)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='used_in', to='forum.product')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='forum.recipe')),
            ],
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['title'], name='forum_recip_title_000773_idx'),
        ),
        migrations.AddIndex(
            model_name='reaction',
            index=models.Index(fields=['recipe'], name='forum_react_recipe__b239e3_idx'),
        ),
        migrations.AddIndex(
            model_name='reaction',
            index=models.Index(fields=['user'], name='forum_react_user_id_cb8782_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reaction',
            unique_together={('user', 'recipe')},
        ),
        migrations.AddIndex(
            model_name='recipeingredient',
            index=models.Index(fields=['recipe', 'product'], name='forum_recip_recipe__797ed8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='recipeingredient',
            unique_together={('recipe', 'product')},
        ),
    ]
